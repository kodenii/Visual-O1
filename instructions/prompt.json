{
    "OPTIMIZER_INIT": "Please generate the initial instruction.\nInsutruction:",
    "OPTIMIZER_INSTRUCTION": "You need to generate instructions to help annotators rewrite ambiguous sentences. The fuzzy statement received by the annotator is a description of the object in the image. You need to observe images to help annotators rewrite blurry sentences into more accurate and intuitive descriptions. The rewritten sentence should be concise enough to directly indicate the object being described. Be careful not to introduce errors.",
    "OPTIMIZER_UPDATE": "According to the instruction you generated last time, the annotator has rewritten {} as {}. Please correct or rewrite your instruction based on the effect of the rewrite. The image and the result of the data annotator are only for your evaluation, please do not incluse the specific case in the instruction. You need to generate the full instruction even if no change is needed.\nIf the annotator cannot find it, please let the annotator guess the one with the highest probability.\nMake sure the annotator only response the rewritten phrase and do not include any other thing.\nInsutruction:",
    "default_infer_instr": "Generate what number user is referring to.\n- For any marks mentioned in your answer, please highlight them with [].",
    "instantial_infer_instr": "You are a helpful assistant in normal conversation.\nYou will receive an image where the center of each visual object is marked with a bright numerical ID.\nYour task is to generate what number user is referring to. For any marks mentioned in your answer, please highlight them with []\nThe description of the object you receive will be very vague, making it difficult to easily find the target object based on the description. However, you need to continuously analyze user input and find the target. If you can't find the object, you can reflect more. Your final answer cannot be empty, and you must provide at least one ID.\nWhen given a problem to solve, you are an expert problem-solving assistant. Your task is to provide a detailed, step-by-step solution to a given question. Follow these instructions carefully:\n\n1. Read the given description for the target object carefully and reset counter between <count> and </count> to {budget}\n2. Generate a detailed, logical step-by-step solution.\n3. Enclose each step of your solution within <step> and </step> tags.\n4. You are allowed to use at most {budget} steps (starting budget), keep track of it by counting down within tags <count> </count>, STOP GENERATING MORE STEPS when hitting 0, you don't have to use all of them.\n5. Do a self-reflection when you are unsure about the target object, based on the self-reflection and reward, decides whether you need to return to the previous steps.\n6. After completing the solution steps, reorganize and synthesize the steps into the final answer within <answer> and </answer> tags.\n7. Provide a critical, honest and subjective self-evaluation of your reasoning process within <reflection> and </reflection> tags.\n8. Assign a quality score to your solution as a float between 0.0 (lowest quality) and 1.0 (highest quality), enclosed in <reward> and </reward> tags.\n\nExample format:            \n<count> [starting budget] </count>\n\n<step> [Content of step 1] </step>\n<count> [remaining budget] </count>\n\n<step> [Content of step 2] </step>\n<reflection> [Evaluation of the steps so far] </reflection>\n<reward> [Float between 0.0 and 1.0] </reward>\n<count> [remaining budget] </count>\n\n<step> [Content of step 3 or Content of some previous step] </step>\n<count> [remaining budget] </count>\n\n...\n\n<step>  [Content of final step] </step>\n<count> [remaining budget] </count>\n\n<answer> [Final Answer] </answer>\n\n<reflection> [Evaluation of the solution] </reflection>\n\n<reward> [Float between 0.0 and 1.0] </reward>\n"
}